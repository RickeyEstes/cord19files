Designing overlapping homologs: goal of the algorithm. We start from a pair of protein domains, whose amino acid sequences we denote X and Y. The goal is to determine homologous amino acid sequences X′, Y′ such that the coding sequence of the smaller protein is entirely embedded within that of the larger protein, being coded either on the same DNA strand in a different reading frame or on the opposite strand. The five choices of reading frames for Y are shown in Fig. 1 . We choose a reading frame F = −2, −1, 0, 1, or 2 for Y, and a starting point for the smaller of the two proteins, such that its coding sequence will be entirely embedded within that of the larger protein. Applying a sequence optimization algorithm described below, we obtain the protein sequences (X′, Y′), which are as similar as possible to X, Y and whose coding sequences completely overlap. The similarity is measured by a Blosum similarity score, summed over the length of both proteins: is the i th amino acid of X (resp., Y, X′, Y′), and p i , q j are position-dependent weights that reflect sequence conservation among natural homologs of X and Y. They are chosen so that positions in X, Y that are highly conserved (respectively, variable) have high (low) weights (see below). Designing overlapping homologs: an exact algorithm. We now describe the optimization scheme, starting with the case F = 0. In this reading frame, Y′ is coded on the antisense strand in register with X′: each codon of Y′ overlaps with a single X′ codon on the opposite strand. To maximize the similarity score (Eq. (1)), we simply choose the optimal nucleotides for each pair of base-paired codons, by comparing the 64 possible choices and picking the one that gives the largest contribution to S(X′, Y′). In all the other reading frames, each codon of X′ and Y′ overlaps with two other codons and another approach is needed. We consider the F = −2 case first. The DNA sequence to be optimized is the region of X′, Y′ overlap. We number the X′ codons in this region in the 5′ → 3′ direction (the direction of the polypeptide sequence). For each X′ codon c X (k), we denote c Y (k) the Y′ codon on the opposite strand that has two overlapping nucleotides. The two codons c X (k) and c Y (k) define a quartet of nucleotides on the X′ strand, which we denote Q k , shown in Fig. 2A . The following quartet Q k+1 shares its first nucleotide with Q k : Q k+1 (1) = Q k (4), so that the sequences of any two consecutive quartets are linked 17 . The key step is to express the DNA sequence, not as a series of codons but as a series of quartets, whose sequences will be varied subject to the linkage constraint. This representation of the DNA sequence is shown in Fig. 2B . With this representation, the problem of maximizing S(X′, Y′) is closely analogous to sequence alignment 19 and can be solved by a similar recursive method, schematized in Fig. 3 . Let N be the number of X′ codons, which is also the number of quartets. For any position k in the sequence, there are 4 4 = 256 possible quartets Q, which can be subdivided into four groups of 64, depending on their last nucleotide: Q(4) = A, C, G, or T. This nucleotide defines the "state" of the quartet: . The first step of our algorithm consists in filling a 4-by-N table of optimal scores, where each entry corresponds to a position in the sequence of quartets and a quartet state. We fill the table from left to right, one column at a time. To fill in column k, we assume column k − 1 contains, for each state , the score of the optimal sequence that terminates in this state, say − M k ( 1; )  . For column k, for any quartet Q, an optimal sequence terminating with Q is necessarily obtained by adding Q to a sequence whose k − 1 quartet has the state  = Q(1). Let s(Q) be the contribution to S(X′, Y′) of the two codons contained within a quartet Q (and its complementary strand). We have the recursion: The maximum is taken over the 64 quartets Q j that have  as their last nucleotide (Q j ∈ ). Their optimal character is tested by adding s(Q j ) to the score M k Q The first nucleotide of each X codon appears twice in the sequence of quartets. Only the X strand is shown, for simplicity. As we fill in entry M k ( ; )  in the table, we also tabulate the "optimal" quartet, called Q k , that led to its score. Initialization of the leftmost column is done by adding a column "0" to the left of the table, filling it with zeroes, and applying (2) to column k = 1. Once the table is filled, we perform a traceback operation, analogous to sequence alignment. It consists in concatenating the optimal quartets backwards, with the first nucleotide Q k (1) of the each optimal quartet serving as a pointer to the state  we should move to in the previous column. The cost of the whole procedure is proportional to the length N of the overlapping sequences. For the reading frames other than F = −2, the same method applies; only the positions of the X′ and Y′ codons within each quartet Q change, changing slightly the mechanics for calculating the score S(Q). This method leads to the sequences X′, Y′ that globally maximize the score S(X′, Y′). The method also applies, with straightforward adjustments, to cases where each nucleotide quartet contains three or more overlapping codons; for example, a reference X codon, a second Y codon on the opposite strand (F = −2 frame) and a third Z codon on the same strand (F = 1 frame). Only the quartet scoring mechanics (Eq. (1)) change slightly, with each codon in the quartet contributing a term to the score S(X′, Y′, Z′). The method can thus be used to design three, four, or even six overlapping genes. To design five or six overlapping genes (using all six reading frames at once), the coding sequence should be represented as a series of nucleotide quintets, instead of quartets. It is also straightforward to extend the algorithm to situations where one uses more than four nucleotide types, or codons that are four nucleotides long, instead of three 23 , which could be of interest in synthetic biology, or still longer codons, which could be of interest for other types of information storage. Below, we present the successful design of 200 triple genes as an illustration. Test data and calculations. The algorithm was tested on 500 Pfam protein domains, 70-100 amino acids long, from 500 Pfam families. Within each family, the first protein was chosen. Each domain was assigned a conservation pattern based on the Pfam seed alignment of its family. Specifically, we assigned to each position i of X a weight p i , inversely proportional to the exponential of the sequence entropy S i of the corresponding column 19 . The entropy was computed not from the amino acid types, but from a simplified classification into six groups: The search algorithm was applied to all 500 × 500 domain pairs, in three possible reading frames. For the frames F = −2 and F = 0, we did two calculations per pair, with the beginning of the shorter protein X′ aligned with either end of Y′. For the frame F = 1, we also did two calculations per pair; the beginning of the two proteins were aligned, and either Y or X was in the F = 1 frame (with the other protein in the F = 0 frame). This led to a total of 751,500 optimization runs. The nucleotide sequences do not include a STOP codon; we assume one can be added (to the shorter protein) by manually changing a few nucleotides. To evaluate the similarity between the homologs X′, Y′ and the target proteins X, Y, we did a Blast search of the Swissprot database using the homolog sequence X′ or Y′ as the query, and retrieved the best E-value corresponding to the target protein family. This was not always the target protein X or Y, but sometimes a natural homolog from the same Pfam family. The corresponding E-values for X′ and Y′ were compared, and the largest one, denoted E p (X′, Y′), was taken as the homology metric. For the longer protein, say Y, the non-overlapping part of the protein sequence was not included in the Blast query; only the overlapping sequence was employed. We only considered a Blast result if the match length was at least 85% of the length of the overlapping sequence region; all shorter Blast matches were discarded. To evaluate the similarity further, we submitted each homolog to the Superfamily library of Hidden Markov Models 24 , which each correspond to one family in the SCOP classification of protein domains 25 , to determine if ( 1, )  of the best sequence that terminates in that state. To annotate the A state in column k, we consider the 64 quartets on the right and select the one that leads to the maximal score, M k A ( , )  = . Q j (1) is the first nucleotide of quartet j. The pointer in each box (grey arrow) indicates by its slope which is the previous state; for example the pointer in the state G box on the left comes from state A at the very top of the k − 2 column; the pointer in the state T box comes from the G state one line above in the k − 2 column. the submitted sequence belongs to the correct SCOP family. Only the shorter protein of the pair was tested. Of the 500 natural Pfam domains, 183 had a SCOP match according to Superfamily; the Superfamily tests were limited to their predicted homologs. 