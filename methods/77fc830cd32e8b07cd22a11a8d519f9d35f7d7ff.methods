Formulation and notation. We use the Crump-Mode-Jagers generalised branching process. We follow Jagers' setting 49 : each individual is assigned a random variable λ modelling its life/recovery time and a point process ξ modelling the number of individuals that he infects and the respective infection times. The pairs (λ, ξ) assigned to different individuals are independent and identically distributed. This implies that in the process z(t), defined as the number of individuals alive at time t, is indeed a branching process. In our model, λ is an exponential random variable representing the life span of an individual, its expectation is 1/δ where δ is the death rate. If δ = 0 we have trees with no death, this results in ultrametric trees, i.e. trees where the distance from an ancestor to any of the tips is the same. This removes the risk that sampling through time will bias the shape features 21 . The point process ξ (the new infections caused by each individual) is a non-homogeneous Poisson process with intensity I(t). The mean number of secondary infections caused by any individual (R 0 ) is given by , where t is the time since an the individual became infected. The Malthusian parameter M is the finite positive solution to the equation < ∞, which are reasonable properties in the context of transmission trees (and we assume them throughout). The Malthusian parameter captures the growth of the process because the expectation E[e −Mt z(t)] converges to a constant as t → ∞ 50 . To convert the branching process simulation to a rooted binary transmission tree with branch lengths in units of time, we begin at the source case, adding a node each time there is an infection event. One of the descending lineages from that node corresponds to the infector (say A), and the other to the infectee (say B). The length of the branch is either (1) the time between A's infection and A infecting B (if B is the first case A infected), or (2) the time between A's infecting the individual she infected just prior to B and the time A infects B. The pendant branch length to the tip labelled B is the time between either (1) B's infection and B's sampling (if B did not infect anyone) or (2) the time between B's last infection of someone else and B's sampling. In this way, the branching process defines a rooted, timed, bifurcating tree. While the focus of this paper is on how the shapes of these trees are affected by the intensity function describing when infection events occur, the motivation of the work makes the implicit assumption that these shapes are made relevant because under good conditions, timed phylogenetic trees are a reasonable approximation to these bifurcating timed transmission trees. Simulations. Simulating stochastic branching trees under processes with memory is challenging. Gillespie-type methods do not fit the problem naturally, and steps must be taken to ensure that all events that can happen before the final simulation time have the appropriate probability of happening (affecting the conditions under which the process can be stopped). This can be very computationally time-consuming due to the variability of the tree size in branching processes. This complexity is part of the motivation for using simple intensity functions. To simulate non homogeneous trees, we wrote an iterative function that takes in input the ancestor, the start and final time of the tree, the intensity function and the life-span distribution: SimNHTree(ancestor, start-Time, finalTime, int, lambda). The branching property states that the subtree generated by each daughter of the ancestor is equal, in distribution, to the whole tree in every aspect but the starting time. To use this property we first find the number of daughters of the ancestor and their birth times, simulating a non homogeneous Poisson process with intensity int. Then, for each of the ancestor's daughters, the function SimNHTree calls itself with the daughter and its birth time as new input: SimNHTree(daughter i , birthTime(daughter i ), finalTime, int, lambda). This generates the ancestor's daughters subtrees which can be merged because we track each subtree's ancestor and start time. We use two different approaches to setting the stopping time: in Scenario 1 we fix the time for each intensity function so that when R 0 is the same, so is the time, and when M is the same, so is the time. In Scenario 2 we tune the time to obtain, on average, trees with the desired number of tips. To do this, we use a simple algorithm that simulates a group of trees and if the total average of the tips is too high/low then the algorithm decreases/increases the final time and starts a new simulation. It stops once the average number of tips of each group is between 32 and 34 (to be comparable to our dataset) or between 98 and 102, in order to compare results in larger trees (Scenario 2-large). To exclude meaningless cases, we rejected trees with fewer than 5 tips. In each scenario, we vary the delay between becoming infected and infecting others, using different intensity functions (each labelled with a case number illustrated in Figs. 1 and 2(a)). In Scenario 3 we increase both the delay between becoming infected and infecting others (ie location of the intensity function) and the height of the intensity function. This results in the basic reproduction number ranging more widely than in Scenarios 1 and 2. Here we also use a positive death rate, so trees are not ultrametric. The parameters were chosen empirically, in order to explore and compare trees originated by different intensity functions, but sharing biologically-relevant measures such as R 0 , M or the size. The parameter choice was not intended to fit a specific outbreak. However, R 0 values for most common pathogens including tuberculosis (R 0 = 1-1.5) are in the range 1-6, with some viruses having much higher values (measles for example at R 0 ≈ 20). Our choices of R 0 mirror these values. The sizes of our outbreaks mirror the dataset we have, and in order that the results not be restricted to processes of this small size we also explore larger trees. Table 1 and Figs 1 and 2(a) give details of the parameters in each simulation. We compare these sets of simulations with two sets of constant-rate birth-death trees, one with with parameters matching the R 0 of the trees in Scenario 1, and one with parameters estimated from our TB data using BEAST. For each case in Scenario 1, 2 and 3 we simulate 200 trees and for the two homogeneous cases we simulate 1000 trees. The number of secondary infections per infectious case has a mean of R 0 but of course it can be distributed in various ways. In the terminology of branching processes this distribution is called the offspring distribution; the constant-rate birth-death process has a geometric offspring distribution (a convolution of a Poisson number during their lifespan and an exponential lifespan). However our non-homogeneous Poisson processes, in which cases survive their infectious period, have a Poisson offspring distribution. To explore possible effects of this difference, we simulate a variant of our process in which the intensity functions varied as in Scenario 1, but we draw the numbers of secondary infections from a geometric distribution (see Supplement). Intensity functions: the time between infection and infecting others. For scenario 1, 2, and 2-large we choose intensity functions such that we can introduce memory while fixing R 0 (cases 1-4 in Table 1 ), or fixing the Malthusian parameter (cases 5-8 in Table 1) . It is not possible to fix both simultaneously while varying the intensity function independently. We vary the timing of infectiousness, from beginning immediately (cases 1 and 5 in Table 1 ) to beginning relatively late after a case was infected (cases 4 and 8 in Table 1 ); Fig. 1 illustrates the intensity functions for each case. For a general step-like intensity function, R 0 is given by where k is the height of the step, n defines the step interval [n, n + 1] and δ is the death rate. The Malthusian parameter M cannot be written in closed form and is the solution of the following equation: where k, n and δ are same as in Equation (1). Given a fixed value of R 0 , Eq. (1) can be used to obtain different intensity functions with the same R 0 , varying the parameters n and k. In a similar way if M is fixed, from Eq. (2) one can derive the height k for different values of n, thus defining different intensity functions with the same Malthusian parameter. In this way we derive the intensity functions in Fig. 1 . 