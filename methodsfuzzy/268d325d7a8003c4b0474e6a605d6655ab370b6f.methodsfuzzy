We simulated infectious disease progression on networks. The nodes of the networks represented hosts and had states of being susceptible, infectious, or recovered. The edges of the network determined the set of possible transmission events; infectious hosts transmitted infection across edges shared with susceptible hosts until the infectious hosts recovered. The number of nodes in the network was kept at 10,000, and the mean degree (degree is the number of edges coming out of a node) was kept at 4. The networks were built to be either regular, meaning that all nodes have the same degree, or with degree distributions sampled from Poisson, exponential, or Pareto distributions. The minimum degree in the Pareto networks was 1. The regular networks served as models with zero heterogeneity, Poisson networks as models with heterogeneity similar to a Poisson process, exponential networks as models with heterogeneity similar to a variety of social networks [14] , and Pareto networks (scale-free networks) as models with the extreme levels of heterogeneity that might be found in sexual contact networks [15] . We used the Erdös-Rényi algorithm [16] to generate Poisson networks and an edge-shuffling algorithm [17] to generate the regular, exponential, and Pareto networks. We simulated epidemics and genealogies in continuous time using a method based on the Stochastic Simulation Algorithm [18, 19] . Epidemics began with one node infectious and the rest of the nodes being susceptible. Infectious nodes recovered at a set rate and transmitted infection to susceptible neighbors (nodes sharing an edge) at a set rate. We drew the time to the next event from an exponential distribution with a rate equal to the sum of the rates of all possible events. We then selected an event with probability proportional to its rate, updated the state of the network accordingly, and drew the time until the next event. This process was iterated until either the time evolution of the epidemic reached a set time point or no more events were possible. Simulation source code is available from the authors upon request. The code made use of the GNU scientific library [20, version 1.13+dsfg-1] to generate random numbers and the igraph library [21, version 0.5.3-6] to construct networks. The output of a simulation included a time series of prevalence, that is, the count of infected nodes (given a fixed population of 10,000 nodes), and incidence, that is, the sum of the rates of all possible transmissions. Simulations also generated infection trees in which each transmission was a bifurcating node, each recovery was a terminal node, and branch lengths were equal to the time between events. We sampled from the full infection trees to generate the trees for input in the skyride coalescent analyses. We sampled by selecting a set of nodes uniformly at random from the full infection tree to become tip branches of an infection subtree. To generate the subtree, we cut the branches of the full infection tree at the subset of randomly selected nodes that had no descendants in the set of randomly selected nodes, and we pruned off any paths that did not terminate in this subset of nodes. Using the sampled infection trees as genealogies, we obtained a posterior distribution for the skyride population sizes with the time-aware method of Minin et al. [13] , implemented in BEAST [12, version 1.5.4 ]. The MCMC chain lengths were 100,000 states, and every 10th state was written to a log file. We discarded the first 10,000 states as burn in. In all cases, effective sample sizes were well above 200. Thus, convergence had occurred. Examples of BEAST XML input files are available from the authors upon request. Using the posterior skyride population-size distributions, we obtained the skyride trajectories with Tracer [22, version 1.5] . Using the framework of Volz et al. [11] , we calculated a predicted skyride as described next in the Results. To plot time series from different stochastic simulations on a common time scale, we used the time at which growth became nearly deterministic in each simulation as time zero for that simulation. 


Section:materials and methods