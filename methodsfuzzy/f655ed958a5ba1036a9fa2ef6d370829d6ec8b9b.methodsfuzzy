Probe design using CATCH Designing a probe set given a single choice of parameters-We first describe how CATCH determines a probe set that covers input sequences under some selection of parameters. That is, the input is a collection of (unaligned) sequences d and parameters θ d describing hybridization, and the goal is to compute a set of probes s(d, θ d ). For example, d commonly encompasses the strain diversity of one or more species and θ d includes the number of mismatches that we ought to tolerate when determining whether a probe hybridizes to a sequence. CATCH produces a set of "candidate" probes from the input sequences in d by stepping along them according to a specified stride (Fig. 1a) . Optionally, CATCH uses localitysensitive hashing 27, 28 (LSH) to reduce the number of candidate probes, which is particularly useful when the input is a large number of highly similar sequences. CATCH supports two LSH families: one under Hamming distance 27 and another using the MinHash technique 28, 51 , which has been used in metagenomic applications 52, 53 . It detects nearduplicate candidate probes by performing approximate near neighbor search 28 using a specified family and distance threshold. CATCH constructs hash tables containing the candidate probes and then queries each (in descending order of multiplicity) to find and collapse near-duplicates. Because LSH reduces the space of candidate probes, it may remove candidate probes that would otherwise be selected in steps described below, thereby increasing the size of the output probe set. Use of LSH to reduce the number of candidate probes is optional in our implementation of CATCH; we did not use it to produce the probe sets in this work. The approach of detecting near-duplicates among probes (and subsequently mapping them onto sequences, described below) bears some similarity to the use of P-clouds for clustering related oligonucleotides in order to identify diverse repetitive regions in the human genome 54, 55 . CATCH then maps each candidate probe p back to the target sequences with a seed-andextend-like approach, in the process deciding whether p maps to a range r in a target sequence according to a function f map (p, r, θ d ). f map effectively specifies whether p will capture the subsequence at r. Further, CATCH assumes that because p captures an entire fragment and not just the subsequence to which it binds, p "covers" both r and some number of bases (given in θ d ) on each side of r; we term this a "cover extension". This yields a collection of bases in the target sequences that are covered by each p, namely: p, s, bases in s covered by p for all s in d for all candidate probes p . Next, CATCH seeks to find the smallest set of candidate probes that achieves full coverage of all sequences in d. The problem is NP-hard. To determine s(d, θ d ), an approximation of the smallest such set of candidates probes, CATCH treats the problem as an instance of the set cover problem. Similar approaches have been used in related problems in uncovering patterns in DNA sequence. Notably, these include PCR primer selection [56] [57] [58] , string barcoding of pathogens 59, 60 , and other applications in microbial microarrays [61] [62] [63] , although these are not aimed at whole genome enrichment for sequencing many taxa. CATCH computes s(d, θ d ) using the canonical greedy solution to the set cover problem 25, 26 , which likely provides close to the best achievable approximation 64 . In this approximationpreserving reduction, each candidate probe p is treated as a set whose elements represent the bases in the target sequences covered by p. The universe of elements is then all the bases across all the target sequences --i.e., what it seeks to cover. To implement the algorithm efficiently, CATCH operates on sets of intervals rather than base positions and applies other techniques to improve performance for this problem. Extensions to probe design-This framework for designing probes offers considerable flexibility. Supplementary Note 1 describes the default f map in CATCH and how it can be customized; how CATCH allows for differential identification, blacklisting sequence, and partial coverage of target sequence; and how CATCH adds adapters to probes for PCR amplification. Designing across many taxa-Consider a large set of input sequences that encompass a diverse set of taxa (e.g., hundreds of viral species). We could run CATCH, as described above, on a single choice of parameters θ d such that the number of probes in s(d, θ d ) is feasible for synthesis. However, this can lead to a poor representation of taxa in the diverse probe set; it can become dominated by probes covering taxa that have more genetic diversity (e.g., HIV-1). Furthermore, it can force probes to be designed with relaxed assumptions about hybridization across all taxa. To alleviate these issues, we allow different choices of parameters governing hybridization for different subsets of input sequences, so that some can have probes designed with more relaxed assumptions than others. We represent a set of taxa and its target sequences with a dataset d, with its own parameters θ d . Let {θ d } be the collection of θ d across all d. We wish to find S({θ d }), the union of s(d, θ d ) across all datasets d. CATCH finds this by solving a constrained nonlinear optimization problem: The constraint N on the number of probes in the union is specified by the user; this is the number of probes to synthesize, and might be determined based on synthesis cost and/or array size. CATCH solves this using the barrier method with a logarithmic barrier function. By default, we use the following loss function for each d: where m d gives a number of mismatches to tolerate in hybridization and e d gives a cover extension, as defined above. w d allows a relative weighting of datasets, e.g., if one should have more stringent assumptions about hybridization and thus more probes. β 1 , β 2 , and the set of {w d }s can be specified by the user. A user can also choose to generalize the search to a different set of parameters: where θ di is the value of the ith parameter for d and β i is a specified coefficient for that parameter. In practice, we have used the default loss function above, with w d =1 for all d, β 1 =1, and too small a range to satisfy the constraint. That is, one or more of the parameter values may need to be relaxed (across one or more datasets) to obtain ≤ N probes. When this happens, our implementation of CATCH raises an error and suggests that the user provide less stringent choices of parameter values. 


Section:online methods