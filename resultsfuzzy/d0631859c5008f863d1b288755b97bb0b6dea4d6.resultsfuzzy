In this section, we examine the friction compensation and intent detection used in the exoskeleton and analyze the results. The load generated when the wearer moves is calculated for the friction compensation experiment in Section 4.1. LBKA sensor data and encoder data are examined in Section 4.2. The intention detection was tested in Section 4.3. We also tested the intention detection in various environments for generality. The sampling time of the system is 5.0 ms, and the wearer has a height of 176 cm and a weight of 76 kg. In this section, we examine the friction compensation and intent detection used in the exoskeleton and analyze the results. The load generated when the wearer moves is calculated for the friction compensation experiment in Section 4.1. LBKA sensor data and encoder data are examined in Section 4.2. The intention detection was tested in Section 4.3. We also tested the intention detection in various environments for generality. The sampling time of the system is 5.0 msec, and the wearer has a height of 176 cm and a weight of 76 kg. A neural network was used for intent detection. Neural network implementation was done using a MATLAB toolbox. Each of the three states-walking, stair ascending, and stair descending-used 40 training datasets, and 200 training datasets were used for exception state training. Since the pattern of each state is not complicated, the number of hidden layers was set to 15 to avoid overfitting, and the number of datasets in each state was also adjusted to avoid overfitting. In addition, the number of training datasets for the exception state, which is difficult to train because there is no fixed pattern, is more than the training datasets of other states. If the data are too much in one data set, errors can occur while training the neural network. Therefore, the number of exception data was adjusted so that the neural network does not have problems in training. Cross entropy is a typical loss function used when the output of the neural network is between 0 and 1. This is defined through the relationship between the estimated probability distribution and the true distribution as a stochastic calculation. The performance of the trained neural network can be evaluated through cross entropy. In Figure 13 , the performance graph of the trained neural network shows that the error of the trainset decreases after the 43rd epoch, but the error of the test set increases. This means that overfitting occurs after the 43rd epoch. Therefore, training was correctly performed by selecting 43 epochs that have the best performance in both the test set and training set. A neural network was used for intent detection. Neural network implementation was done using a MATLAB toolbox. Each of the three states-walking, stair ascending, and stair descending-used 40 training datasets, and 200 training datasets were used for exception state training. Since the pattern of each state is not complicated, the number of hidden layers was set to 15 to avoid overfitting, and the number of datasets in each state was also adjusted to avoid overfitting. In addition, the number of training datasets for the exception state, which is difficult to train because there is no fixed pattern, is more than the training datasets of other states. If the data are too much in one data set, errors can occur while training the neural network. Therefore, the number of exception data was adjusted so that the neural network does not have problems in training. Cross entropy is a typical loss function used when the output of the neural network is between 0 and 1. This is defined through the relationship between the estimated probability distribution and the true distribution as a stochastic calculation. The performance of the trained neural network can be evaluated through cross entropy. In Figure 13 , the performance graph of the trained neural network shows that the error of the trainset decreases after the 43rd epoch, but the error of the test set increases. This means that overfitting occurs after the 43rd epoch. Therefore, training was correctly performed by selecting 43 epochs that have the best performance in both the test set and training set. Figure 14 shows the ROC curve used for measuring the performance of the neural network. The vertical axis of the ROC is Sensitivity, which is the ratio of cases classified as positive during the actual positive case. The horizontal axis of the ROC is the false positive rate, which is the ratio of cases that are actually negative, among the cases judged positive. It is a graph to check whether a positive case is predicted as positive sensitively while a negative case is not predicted as positive. The ROC curve evaluation shows that all curves are in the upper left, which is a good performance indicator [25] . actual positive case. The horizontal axis of the ROC is the false positive rate, which is the ratio of cases that are actually negative, among the cases judged positive. It is a graph to check whether a positive case is predicted as positive sensitively while a negative case is not predicted as positive. The ROC curve evaluation shows that all curves are in the upper left, which is a good performance indicator [25]. Figure 14 . ROC curve. The trained neural network has good performance because the ROC curve of all states is right upward. are additional experiment graphs to verify the performance of the implemented intent detector. All experiments were performed online through a neural network model that was trained in advance. In the third row of the graph, the probability is calculated by the neural network, and by using this probability, the current state can be determined through the state decision algorithm. The determined current state is plotted in forth row of graph. Stair ascending and stair descending cannot happen consecutively because the direction of the body between the two states is reversed. Thus, walking → stair ascending → walking combination in Figure 15 and walking → stair descending → walking combination in Figure 16 are all combinations in which three states can be mixed. Figure 15 and Figure 16 show that the intention detection is good even when the states are mixed. Figure 17 and Figure 18 are graphs showing that the wearer performs the same motion as Figure 15 and Figure 16 . When training, the neural network was trained by using the data operated in the same period as Figure 15 and Figure 16 , however in Figure 17 and Figure 18 , the wearer operates motion at different periods. Therefore, intention detection could have failed, but as shown in Figure 17 and Figure 18 , the intention detection performed well. Figure 19 shows the sensor value when the knee is bent repeatedly in a standing position. This sensor data pattern is similar to sensor values when the wearer operates other motion, so intention detection could have failed. However, this graph shows that wrong intentions are not detected when similar sensor patterns are measured. These graphs show that the intention is detected well in many difficult cases. Figures 15-19 are additional experiment graphs to verify the performance of the implemented intent detector. All experiments were performed online through a neural network model that was trained in advance. In the third row of the graph, the probability is calculated by the neural network, and by using this probability, the current state can be determined through the state decision algorithm. The determined current state is plotted in forth row of graph. Figure 15 . Mixed stair ascending experiment. In the graph, sensor data and neural network result in walking →stair ascending→ walking mixed state are plotted. Also, the current state determined by state decision algorithm is plotted. Figure 15 . Mixed stair ascending experiment. In the graph, sensor data and neural network result in walking →stair ascending→ walking mixed state are plotted. Also, the current state determined by state decision algorithm is plotted. Figure 15 . Mixed stair ascending experiment. In the graph, sensor data and neural network result in walking →stair ascending→ walking mixed state are plotted. Also, the current state determined by state decision algorithm is plotted. Figure 16 . Mixed stair descending experiment. In the graph, sensor data, neural network, and current data results in walking -stair descending -walking mixed state are plotted. . Similar pattern input experiment. We entered sensor data that could be confused with other states by wearer bending the legs repeatedly. Figure 19 . Similar pattern input experiment. We entered sensor data that could be confused with other states by wearer bending the legs repeatedly. Stair ascending and stair descending cannot happen consecutively because the direction of the body between the two states is reversed. Thus, walking → stair ascending → walking combination in Figure 15 and walking → stair descending → walking combination in Figure 16 are all combinations in which three states can be mixed. Figures 15 and 16 show that the intention detection is good even when the states are mixed. Figures 17 and 18 are graphs showing that the wearer performs the same motion as Figures 15 and 16 . When training, the neural network was trained by using the data operated in the same period as Figures 15 and 16 , however in Figures 17 and 18 , the wearer operates motion at different periods. Therefore, intention detection could have failed, but as shown in Figures 17 and 18 , the intention detection performed well. Figure 19 shows the sensor value when the knee is bent repeatedly in a standing position. This sensor data pattern is similar to sensor values when the wearer operates other motion, so intention detection could have failed. However, this graph shows that wrong intentions are not detected when similar sensor patterns are measured. These graphs show that the intention is detected well in many difficult cases. 


Section:experiments and results
Section:intention recognition experiment result